user  angie;
worker_processes  auto;
worker_rlimit_nofile 65536;

error_log  /var/log/angie/error.log notice;
pid        /run/angie.pid;

load_module modules/ngx_http_brotli_filter_module.so;
load_module modules/ngx_http_brotli_static_module.so;

events {
    worker_connections  65536;
}


http {
    include       /etc/angie/mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format extended '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" rt="$request_time" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'h="$host" sn="$server_name" ru="$request_uri" u="$uri" '
                        'ucs="$upstream_cache_status" ua="$upstream_addr" us="$upstream_status" '
                        'uct="$upstream_connect_time" urt="$upstream_response_time"';

    access_log  /var/log/angie/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

#   Proxy cache zone
    proxy_cache_path /var/cache/angie levels=1:2 keys_zone=wiki_cache:10m inactive=60m use_temp_path=off;

# Websocket

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

# Restrict direct access by IP port 80

    server {
        listen 80;
        server_name _;
        return 444;
    }

# Map for hash

    map $http_user_agent $ua_hash {
        ~*Chrome   $remote_addr;             # Use $remote_addr as hash for Google Chrome clients (user-agent based)
        ~*Firefox  $cookie_session;          # Use $cookie_session as hash for Firefox clients (uaser-agent based)
        default    $remote_addr;
    }

# Upstreams

    upstream wafs {

        zone wafs 1m;

        ip_hash;                                                # Client IP address is used as a hash. First three octets of IPv4, or whole IPv6 are used, guarantees requests will be sent to the same server

        server 10.28.75.5:443 max_fails=3 fail_timeout=30s;
        server 10.28.75.8:443 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    upstream wbmx {
        server 10.28.75.5:443;
    }

    upstream ptcaf { 
        server 10.28.75.8:443;
    }

    upstream testwafs {

        zone testwafs 1m;
                                                                            # Default configuration for round robin
        server 10.28.75.5:443 max_fails=3 fail_timeout=30s;
        server 10.28.75.8:443 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    upstream testhash {

        zone testhash 1m;

        hash $ua_hash consistent;                                            # Uses $ua_hash variable, maped earlier, to define hash. "consistent" appyes ketama method - minimum hash keys redistributed when server is added/removed

        server 10.28.75.5:443 max_fails=3 fail_timeout=30s;
        server 10.28.75.8:443 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    upstream testrnd {

        zone testrnd 1m;

        random;                                                               # Random server selected to send requests. If "two" option is set - two servers selected and according to least_conn method, requests will be sent to the server with least connections.

        server 10.28.75.5:443 max_fails=3 fail_timeout=30s;
        server 10.28.75.8:443 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    include /etc/angie/http.d/*.conf;
}
